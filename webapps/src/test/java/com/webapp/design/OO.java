package com.webapp.design;

public class OO {

	/*
	 * 封装，继承，抽象，多态 封装变化 多用组合，少用继承 针对接口编程，不针对实现编程 为交互对象之间的松耦合设计而努力 类应该对扩展开发，对修改关闭
	 * 要依赖抽象，不要依赖具体类 类应该只有一个改变的理由 ------让你的对象知悉现况 观察者模式 -->
	 * 在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖他的对象都会收到通知，并自动更新 ------让算法的变化独立于使用算法的客户
	 * 策略模式 ---> 定义方法族分别封装起来，让他们之间可以互换，此模式让算法的变化独立于使用算法的客户
	 * ------给爱用继承的人一个全新的设计眼界 装饰者模式 --> 动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案
	 * 命令模式 ---> 将请求封装成对象，这可以让你使用不同的请求，队列，或者日志请求来参数化其它对象。命令模式也可以支持撤销操作 工厂方法模式 ->
	 * 定义了一个创建对象的接口，担由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类 抽象工厂模式 ->
	 * 提供了一个接口，用于创建相关或者依赖的家族，而不需要指定具体类 适配器模式 -->
	 * 将一个类的接口，转换成客户期望的一个接口，适配器让原本不兼容的类合作无间 外观模式 --->
	 * 提供了一个统一的接口，用来访问子接口的一群接口。外观定义了一个高层接口，让子系统更容易使用 模板方法--->
	 * 在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以在不敢变算法结构的情况下，重新定义算法中的某些步骤 迭代器模式
	 * --> 提供了一个方法顺序访问一个聚合对象中的各个元素，而不暴露起内部的表示 组合模式 ---> 允许你将对象组合成树形结构来表现 整体/部分
	 * 层次结构，组合能让客户以一致的方式处理个别对象以及对象的组合 状态模式 ---> 允许对象在内部状态改变时改变他的行为，对象看起来好像修改了它的类
	 */

}
