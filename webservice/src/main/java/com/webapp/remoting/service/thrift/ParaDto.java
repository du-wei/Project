/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.webapp.remoting.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

/**
 * 搜索参数模型
 */
public class ParaDto implements org.apache.thrift.TBase<ParaDto, ParaDto._Fields>, java.io.Serializable, Cloneable, Comparable<ParaDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParaDto");

  private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("longId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("maps", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("sets", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParaDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParaDtoTupleSchemeFactory());
  }

  public byte bytes; // required
  public boolean gender; // required
  public short id; // required
  public int listId; // required
  public long longId; // required
  public double money; // required
  public String name; // required
  public List<String> interest; // required
  public Map<Integer,String> maps; // required
  public Set<String> sets; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BYTES((short)1, "bytes"),
    GENDER((short)2, "gender"),
    ID((short)3, "id"),
    LIST_ID((short)4, "listId"),
    LONG_ID((short)5, "longId"),
    MONEY((short)6, "money"),
    NAME((short)7, "name"),
    INTEREST((short)8, "interest"),
    MAPS((short)9, "maps"),
    SETS((short)10, "sets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BYTES
          return BYTES;
        case 2: // GENDER
          return GENDER;
        case 3: // ID
          return ID;
        case 4: // LIST_ID
          return LIST_ID;
        case 5: // LONG_ID
          return LONG_ID;
        case 6: // MONEY
          return MONEY;
        case 7: // NAME
          return NAME;
        case 8: // INTEREST
          return INTEREST;
        case 9: // MAPS
          return MAPS;
        case 10: // SETS
          return SETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
	public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
	public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTES_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __LISTID_ISSET_ID = 3;
  private static final int __LONGID_ISSET_ID = 4;
  private static final int __MONEY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("listId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_ID, new org.apache.thrift.meta_data.FieldMetaData("longId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAPS, new org.apache.thrift.meta_data.FieldMetaData("maps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SETS, new org.apache.thrift.meta_data.FieldMetaData("sets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParaDto.class, metaDataMap);
  }

  public ParaDto() {
  }

  public ParaDto(
    byte bytes,
    boolean gender,
    short id,
    int listId,
    long longId,
    double money,
    String name,
    List<String> interest,
    Map<Integer,String> maps,
    Set<String> sets)
  {
    this();
    this.bytes = bytes;
    setBytesIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.listId = listId;
    setListIdIsSet(true);
    this.longId = longId;
    setLongIdIsSet(true);
    this.money = money;
    setMoneyIsSet(true);
    this.name = name;
    this.interest = interest;
    this.maps = maps;
    this.sets = sets;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ParaDto(ParaDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bytes = other.bytes;
    this.gender = other.gender;
    this.id = other.id;
    this.listId = other.listId;
    this.longId = other.longId;
    this.money = other.money;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetInterest()) {
      List<String> __this__interest = new ArrayList<String>(other.interest);
      this.interest = __this__interest;
    }
    if (other.isSetMaps()) {
      Map<Integer,String> __this__maps = new HashMap<Integer,String>(other.maps);
      this.maps = __this__maps;
    }
    if (other.isSetSets()) {
      Set<String> __this__sets = new HashSet<String>(other.sets);
      this.sets = __this__sets;
    }
  }

  @Override
public ParaDto deepCopy() {
    return new ParaDto(this);
  }

  @Override
  public void clear() {
    setBytesIsSet(false);
    this.bytes = 0;
    setGenderIsSet(false);
    this.gender = false;
    setIdIsSet(false);
    this.id = 0;
    setListIdIsSet(false);
    this.listId = 0;
    setLongIdIsSet(false);
    this.longId = 0;
    setMoneyIsSet(false);
    this.money = 0.0;
    this.name = null;
    this.interest = null;
    this.maps = null;
    this.sets = null;
  }

  public byte getBytes() {
    return this.bytes;
  }

  public ParaDto setBytes(byte bytes) {
    this.bytes = bytes;
    setBytesIsSet(true);
    return this;
  }

  public void unsetBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTES_ISSET_ID);
  }

  /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTES_ISSET_ID);
  }

  public void setBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTES_ISSET_ID, value);
  }

  public boolean isGender() {
    return this.gender;
  }

  public ParaDto setGender(boolean gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public short getId() {
    return this.id;
  }

  public ParaDto setId(short id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getListId() {
    return this.listId;
  }

  public ParaDto setListId(int listId) {
    this.listId = listId;
    setListIdIsSet(true);
    return this;
  }

  public void unsetListId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTID_ISSET_ID);
  }

  /** Returns true if field listId is set (has been assigned a value) and false otherwise */
  public boolean isSetListId() {
    return EncodingUtils.testBit(__isset_bitfield, __LISTID_ISSET_ID);
  }

  public void setListIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTID_ISSET_ID, value);
  }

  public long getLongId() {
    return this.longId;
  }

  public ParaDto setLongId(long longId) {
    this.longId = longId;
    setLongIdIsSet(true);
    return this;
  }

  public void unsetLongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGID_ISSET_ID);
  }

  /** Returns true if field longId is set (has been assigned a value) and false otherwise */
  public boolean isSetLongId() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGID_ISSET_ID);
  }

  public void setLongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGID_ISSET_ID, value);
  }

  public double getMoney() {
    return this.money;
  }

  public ParaDto setMoney(double money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ParaDto setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getInterestSize() {
    return (this.interest == null) ? 0 : this.interest.size();
  }

  public java.util.Iterator<String> getInterestIterator() {
    return (this.interest == null) ? null : this.interest.iterator();
  }

  public void addToInterest(String elem) {
    if (this.interest == null) {
      this.interest = new ArrayList<String>();
    }
    this.interest.add(elem);
  }

  public List<String> getInterest() {
    return this.interest;
  }

  public ParaDto setInterest(List<String> interest) {
    this.interest = interest;
    return this;
  }

  public void unsetInterest() {
    this.interest = null;
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return this.interest != null;
  }

  public void setInterestIsSet(boolean value) {
    if (!value) {
      this.interest = null;
    }
  }

  public int getMapsSize() {
    return (this.maps == null) ? 0 : this.maps.size();
  }

  public void putToMaps(int key, String val) {
    if (this.maps == null) {
      this.maps = new HashMap<Integer,String>();
    }
    this.maps.put(key, val);
  }

  public Map<Integer,String> getMaps() {
    return this.maps;
  }

  public ParaDto setMaps(Map<Integer,String> maps) {
    this.maps = maps;
    return this;
  }

  public void unsetMaps() {
    this.maps = null;
  }

  /** Returns true if field maps is set (has been assigned a value) and false otherwise */
  public boolean isSetMaps() {
    return this.maps != null;
  }

  public void setMapsIsSet(boolean value) {
    if (!value) {
      this.maps = null;
    }
  }

  public int getSetsSize() {
    return (this.sets == null) ? 0 : this.sets.size();
  }

  public java.util.Iterator<String> getSetsIterator() {
    return (this.sets == null) ? null : this.sets.iterator();
  }

  public void addToSets(String elem) {
    if (this.sets == null) {
      this.sets = new HashSet<String>();
    }
    this.sets.add(elem);
  }

  public Set<String> getSets() {
    return this.sets;
  }

  public ParaDto setSets(Set<String> sets) {
    this.sets = sets;
    return this;
  }

  public void unsetSets() {
    this.sets = null;
  }

  /** Returns true if field sets is set (has been assigned a value) and false otherwise */
  public boolean isSetSets() {
    return this.sets != null;
  }

  public void setSetsIsSet(boolean value) {
    if (!value) {
      this.sets = null;
    }
  }

  @Override
public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BYTES:
      if (value == null) {
        unsetBytes();
      } else {
        setBytes((Byte)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Short)value);
      }
      break;

    case LIST_ID:
      if (value == null) {
        unsetListId();
      } else {
        setListId((Integer)value);
      }
      break;

    case LONG_ID:
      if (value == null) {
        unsetLongId();
      } else {
        setLongId((Long)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Double)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((List<String>)value);
      }
      break;

    case MAPS:
      if (value == null) {
        unsetMaps();
      } else {
        setMaps((Map<Integer,String>)value);
      }
      break;

    case SETS:
      if (value == null) {
        unsetSets();
      } else {
        setSets((Set<String>)value);
      }
      break;

    }
  }

  @Override
public Object getFieldValue(_Fields field) {
    switch (field) {
    case BYTES:
      return Byte.valueOf(getBytes());

    case GENDER:
      return Boolean.valueOf(isGender());

    case ID:
      return Short.valueOf(getId());

    case LIST_ID:
      return Integer.valueOf(getListId());

    case LONG_ID:
      return Long.valueOf(getLongId());

    case MONEY:
      return Double.valueOf(getMoney());

    case NAME:
      return getName();

    case INTEREST:
      return getInterest();

    case MAPS:
      return getMaps();

    case SETS:
      return getSets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BYTES:
      return isSetBytes();
    case GENDER:
      return isSetGender();
    case ID:
      return isSetId();
    case LIST_ID:
      return isSetListId();
    case LONG_ID:
      return isSetLongId();
    case MONEY:
      return isSetMoney();
    case NAME:
      return isSetName();
    case INTEREST:
      return isSetInterest();
    case MAPS:
      return isSetMaps();
    case SETS:
      return isSetSets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ParaDto)
      return this.equals((ParaDto)that);
    return false;
  }

  public boolean equals(ParaDto that) {
    if (that == null)
      return false;

    boolean this_present_bytes = true;
    boolean that_present_bytes = true;
    if (this_present_bytes || that_present_bytes) {
      if (!(this_present_bytes && that_present_bytes))
        return false;
      if (this.bytes != that.bytes)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_listId = true;
    boolean that_present_listId = true;
    if (this_present_listId || that_present_listId) {
      if (!(this_present_listId && that_present_listId))
        return false;
      if (this.listId != that.listId)
        return false;
    }

    boolean this_present_longId = true;
    boolean that_present_longId = true;
    if (this_present_longId || that_present_longId) {
      if (!(this_present_longId && that_present_longId))
        return false;
      if (this.longId != that.longId)
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_interest = true && this.isSetInterest();
    boolean that_present_interest = true && that.isSetInterest();
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (!this.interest.equals(that.interest))
        return false;
    }

    boolean this_present_maps = true && this.isSetMaps();
    boolean that_present_maps = true && that.isSetMaps();
    if (this_present_maps || that_present_maps) {
      if (!(this_present_maps && that_present_maps))
        return false;
      if (!this.maps.equals(that.maps))
        return false;
    }

    boolean this_present_sets = true && this.isSetSets();
    boolean that_present_sets = true && that.isSetSets();
    if (this_present_sets || that_present_sets) {
      if (!(this_present_sets && that_present_sets))
        return false;
      if (!this.sets.equals(that.sets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ParaDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListId()).compareTo(other.isSetListId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listId, other.listId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongId()).compareTo(other.isSetLongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longId, other.longId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaps()).compareTo(other.isSetMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maps, other.maps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSets()).compareTo(other.isSetSets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sets, other.sets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ParaDto(");
    boolean first = true;

    sb.append("bytes:");
    sb.append(this.bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listId:");
    sb.append(this.listId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longId:");
    sb.append(this.longId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    if (this.interest == null) {
      sb.append("null");
    } else {
      sb.append(this.interest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maps:");
    if (this.maps == null) {
      sb.append("null");
    } else {
      sb.append(this.maps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sets:");
    if (this.sets == null) {
      sb.append("null");
    } else {
      sb.append(this.sets);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParaDtoStandardSchemeFactory implements SchemeFactory {
    @Override
	public ParaDtoStandardScheme getScheme() {
      return new ParaDtoStandardScheme();
    }
  }

  private static class ParaDtoStandardScheme extends StandardScheme<ParaDto> {

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, ParaDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bytes = iprot.readByte();
              struct.setBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gender = iprot.readBool();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.id = iprot.readI16();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listId = iprot.readI32();
              struct.setListIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longId = iprot.readI64();
              struct.setLongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.money = iprot.readDouble();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.interest = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.interest.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.maps = new HashMap<Integer,String>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  int _key5;
                  String _val6;
                  _key5 = iprot.readI32();
                  _val6 = iprot.readString();
                  struct.maps.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.sets = new HashSet<String>(2*_set7.size);
                for (int _i8 = 0; _i8 < _set7.size; ++_i8)
                {
                  String _elem9;
                  _elem9 = iprot.readString();
                  struct.sets.add(_elem9);
                }
                iprot.readSetEnd();
              }
              struct.setSetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, ParaDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BYTES_FIELD_DESC);
      oprot.writeByte(struct.bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeBool(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI16(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
      oprot.writeI32(struct.listId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_ID_FIELD_DESC);
      oprot.writeI64(struct.longId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeDouble(struct.money);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.interest != null) {
        oprot.writeFieldBegin(INTEREST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.interest.size()));
          for (String _iter10 : struct.interest)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.maps != null) {
        oprot.writeFieldBegin(MAPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.maps.size()));
          for (Map.Entry<Integer, String> _iter11 : struct.maps.entrySet())
          {
            oprot.writeI32(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sets != null) {
        oprot.writeFieldBegin(SETS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.sets.size()));
          for (String _iter12 : struct.sets)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParaDtoTupleSchemeFactory implements SchemeFactory {
    @Override
	public ParaDtoTupleScheme getScheme() {
      return new ParaDtoTupleScheme();
    }
  }

  private static class ParaDtoTupleScheme extends TupleScheme<ParaDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ParaDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBytes()) {
        optionals.set(0);
      }
      if (struct.isSetGender()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetListId()) {
        optionals.set(3);
      }
      if (struct.isSetLongId()) {
        optionals.set(4);
      }
      if (struct.isSetMoney()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetInterest()) {
        optionals.set(7);
      }
      if (struct.isSetMaps()) {
        optionals.set(8);
      }
      if (struct.isSetSets()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBytes()) {
        oprot.writeByte(struct.bytes);
      }
      if (struct.isSetGender()) {
        oprot.writeBool(struct.gender);
      }
      if (struct.isSetId()) {
        oprot.writeI16(struct.id);
      }
      if (struct.isSetListId()) {
        oprot.writeI32(struct.listId);
      }
      if (struct.isSetLongId()) {
        oprot.writeI64(struct.longId);
      }
      if (struct.isSetMoney()) {
        oprot.writeDouble(struct.money);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetInterest()) {
        {
          oprot.writeI32(struct.interest.size());
          for (String _iter13 : struct.interest)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetMaps()) {
        {
          oprot.writeI32(struct.maps.size());
          for (Map.Entry<Integer, String> _iter14 : struct.maps.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetSets()) {
        {
          oprot.writeI32(struct.sets.size());
          for (String _iter15 : struct.sets)
          {
            oprot.writeString(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ParaDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.bytes = iprot.readByte();
        struct.setBytesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gender = iprot.readBool();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI16();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.listId = iprot.readI32();
        struct.setListIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longId = iprot.readI64();
        struct.setLongIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.money = iprot.readDouble();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.interest = new ArrayList<String>(_list16.size);
          for (int _i17 = 0; _i17 < _list16.size; ++_i17)
          {
            String _elem18;
            _elem18 = iprot.readString();
            struct.interest.add(_elem18);
          }
        }
        struct.setInterestIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.maps = new HashMap<Integer,String>(2*_map19.size);
          for (int _i20 = 0; _i20 < _map19.size; ++_i20)
          {
            int _key21;
            String _val22;
            _key21 = iprot.readI32();
            _val22 = iprot.readString();
            struct.maps.put(_key21, _val22);
          }
        }
        struct.setMapsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sets = new HashSet<String>(2*_set23.size);
          for (int _i24 = 0; _i24 < _set23.size; ++_i24)
          {
            String _elem25;
            _elem25 = iprot.readString();
            struct.sets.add(_elem25);
          }
        }
        struct.setSetsIsSet(true);
      }
    }
  }

}

